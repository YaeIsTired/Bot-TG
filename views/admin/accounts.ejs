<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gaming Accounts Management - Gaming Accounts Store</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #0a0a0f;
            color: #ffffff;
            overflow-x: hidden;
        }

        /* Epic Animated Background */
        .dashboard-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(45deg, #0a0a0f, #1a1a2e, #16213e, #0f3460);
            background-size: 400% 400%;
            animation: gradientShift 20s ease infinite;
        }

        .dashboard-bg::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at 20% 80%, rgba(0, 212, 255, 0.08) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 0, 128, 0.08) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(0, 255, 128, 0.05) 0%, transparent 50%);
            animation: float 25s ease-in-out infinite;
        }

        .dashboard-bg::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image:
                linear-gradient(rgba(0, 212, 255, 0.02) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 212, 255, 0.02) 1px, transparent 1px);
            background-size: 60px 60px;
            animation: gridMove 40s linear infinite;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-20px) rotate(1deg); }
            66% { transform: translateY(-10px) rotate(-1deg); }
        }

        @keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(60px, 60px); }
        }

        /* Epic Sidebar */
        .epic-sidebar {
            background: rgba(10, 10, 15, 0.95);
            backdrop-filter: blur(25px);
            border-right: 1px solid rgba(0, 212, 255, 0.2);
            min-height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            width: 280px;
            z-index: 1000;
            transition: all 0.3s ease;
            overflow-y: auto;
        }

        .epic-sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(180deg,
                rgba(0, 212, 255, 0.05) 0%,
                rgba(255, 0, 128, 0.05) 50%,
                rgba(0, 212, 255, 0.05) 100%);
            pointer-events: none;
        }

        /* Sidebar Brand */
        .sidebar-brand {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            z-index: 2;
        }

        .brand-logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            text-decoration: none;
        }

        .brand-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #00d4ff, #ff0080);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.3s ease;
        }

        .brand-icon::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(135deg, #00d4ff, #ff0080);
            border-radius: 14px;
            opacity: 0;
            filter: blur(8px);
            transition: opacity 0.3s ease;
            animation: brandPulse 3s ease-in-out infinite;
        }

        @keyframes brandPulse {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.4; }
        }

        .brand-icon i {
            font-size: 1.5rem;
            color: white;
            z-index: 2;
        }

        .brand-text h4 {
            font-weight: 800;
            background: linear-gradient(135deg, #ffffff, #00d4ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
            font-size: 1.3rem;
        }

        .brand-text span {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.85rem;
            font-weight: 500;
        }

        /* Sidebar Navigation */
        .sidebar-nav {
            padding: 1rem 0;
            position: relative;
            z-index: 2;
        }

        .nav-section {
            margin-bottom: 2rem;
        }

        .nav-section-title {
            color: rgba(255, 255, 255, 0.5);
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            padding: 0 1.5rem;
            margin-bottom: 1rem;
        }

        .nav-item {
            margin-bottom: 0.25rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem 1.5rem;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s ease;
            position: relative;
            border-radius: 0;
        }

        .nav-link::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(135deg, #00d4ff, #ff0080);
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }

        .nav-link:hover,
        .nav-link.active {
            color: #00d4ff;
            background: rgba(0, 212, 255, 0.1);
        }

        .nav-link:hover::before,
        .nav-link.active::before {
            transform: scaleY(1);
        }

        .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1.1rem;
        }

        /* Main Content */
        .main-content {
            margin-left: 280px;
            min-height: 100vh;
            position: relative;
            z-index: 1;
        }

        /* Epic Header */
        .epic-header {
            background: rgba(10, 10, 15, 0.9);
            backdrop-filter: blur(25px);
            border-bottom: 1px solid rgba(0, 212, 255, 0.2);
            padding: 2rem 3rem;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .header-title h1 {
            font-size: 2.5rem;
            font-weight: 800;
            background: linear-gradient(135deg, #ffffff, #00d4ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
        }

        .header-title i {
            font-size: 2rem;
            color: #00d4ff;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .action-btn {
            background: rgba(0, 212, 255, 0.1);
            border: 1px solid rgba(0, 212, 255, 0.3);
            color: #00d4ff;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .action-btn:hover {
            background: rgba(0, 212, 255, 0.2);
            color: #00d4ff;
            transform: translateY(-2px);
        }

        .action-btn.primary {
            background: linear-gradient(135deg, #00d4ff, #0099cc);
            border-color: transparent;
            color: white;
        }

        .action-btn.primary:hover {
            background: linear-gradient(135deg, #0099cc, #00d4ff);
            color: white;
            box-shadow: 0 10px 25px rgba(0, 212, 255, 0.3);
        }

        /* Accounts Section */
        .accounts-section {
            padding: 3rem;
        }

        /* Stats Overview */
        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(25px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            border-color: rgba(0, 212, 255, 0.3);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #00d4ff, #ff0080);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
        }

        .stat-info h3 {
            font-size: 1.8rem;
            font-weight: 800;
            background: linear-gradient(135deg, #00d4ff, #ff0080);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
        }

        .stat-info p {
            color: rgba(255, 255, 255, 0.7);
            margin: 0;
            font-weight: 500;
        }

        /* Search Section */
        .search-section {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(25px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .search-bar {
            position: relative;
            flex: 1;
            max-width: 400px;
        }

        .search-bar i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.5);
            z-index: 2;
        }

        .search-bar input {
            width: 100%;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            padding: 0.75rem 1rem 0.75rem 3rem;
            color: white;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .search-bar input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .search-bar input:focus {
            outline: none;
            border-color: #00d4ff;
            background: rgba(0, 212, 255, 0.1);
            box-shadow: 0 0 0 0.2rem rgba(0, 212, 255, 0.25);
        }

        .filter-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .filter-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: rgba(255, 255, 255, 0.7);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .filter-btn:hover,
        .filter-btn.active {
            background: rgba(0, 212, 255, 0.2);
            border-color: #00d4ff;
            color: #00d4ff;
        }

        /* Accounts Grid */
        .accounts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .account-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(25px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .account-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.05), rgba(255, 0, 128, 0.05));
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .account-card:hover {
            transform: translateY(-10px);
            border-color: rgba(0, 212, 255, 0.3);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .account-card:hover::before {
            opacity: 1;
        }

        .account-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 2;
        }

        .account-game {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(0, 212, 255, 0.1);
            border: 1px solid rgba(0, 212, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            color: #00d4ff;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .account-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .account-status.available {
            color: #22c55e;
        }

        .account-status.sold {
            color: #ef4444;
        }

        .account-status i {
            font-size: 0.6rem;
        }

        .account-info {
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 2;
        }

        .account-info h4 {
            font-size: 1.3rem;
            font-weight: 700;
            color: #ffffff;
            margin: 0 0 0.5rem;
        }

        .account-description {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            line-height: 1.5;
            margin: 0;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .account-details {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 2;
        }

        .detail-item {
            text-align: center;
        }

        .detail-item .label {
            display: block;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.8rem;
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .detail-item .value {
            display: block;
            color: #ffffff;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .detail-item .value.price {
            color: #00d4ff;
            font-size: 1.1rem;
            font-weight: 700;
        }

        .purchase-info {
            background: rgba(40, 167, 69, 0.1);
            border: 1px solid rgba(40, 167, 69, 0.3);
            border-radius: 8px;
            padding: 0.75rem;
            margin-top: 1rem;
            backdrop-filter: blur(5px);
        }

        .purchase-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            color: #28a745;
            margin-bottom: 0.75rem;
            font-size: 0.85rem;
        }

        .purchase-item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .purchase-item:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

        .purchase-user {
            flex: 1;
        }

        .purchase-user .user-name {
            font-weight: 600;
            color: #ffffff;
            font-size: 0.8rem;
            line-height: 1.2;
        }

        .purchase-user .user-username {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.7rem;
            margin-top: 0.1rem;
            line-height: 1.1;
        }

        .purchase-date {
            font-size: 0.7rem;
            color: rgba(255, 255, 255, 0.6);
            text-align: right;
            white-space: nowrap;
            margin-left: 0.5rem;
        }

        .purchase-more {
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.75rem;
            font-style: italic;
            padding-top: 0.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: 0.5rem;
        }

        /* Account Code Section Styles */
        .credentials-section {
            background: rgba(243, 156, 18, 0.1);
            border: 1px solid rgba(243, 156, 18, 0.3);
            border-radius: 8px;
            padding: 0.75rem;
            margin-top: 1rem;
            backdrop-filter: blur(5px);
        }

        .credentials-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            color: #f39c12;
            margin-bottom: 0.75rem;
            font-size: 0.85rem;
        }

        .credentials-content {
            display: flex;
            justify-content: center;
        }

        .credential-item {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .credential-value {
            background: rgba(0, 0, 0, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            color: #ffffff;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            font-weight: bold;
        }

        .credential-value:hover {
            background: rgba(0, 0, 0, 0.5);
            border-color: #f39c12;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(243, 156, 18, 0.3);
        }

        .copy-icon {
            opacity: 0.6;
            transition: opacity 0.3s ease;
        }

        .credential-value:hover .copy-icon {
            opacity: 1;
            color: #f39c12;
        }

        .code-value {
            color: #f39c12;
        }

        .account-actions {
            display: flex;
            gap: 0.5rem;
            position: relative;
            z-index: 2;
        }

        /* Pagination Styles */
        .pagination-container {
            margin-top: 3rem;
            padding: 2rem 0;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .pagination-info {
            text-align: center;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            margin-bottom: 1.5rem;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .pagination-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
            text-decoration: none;
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .pagination-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: #ffffff;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .pagination-numbers {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .pagination-number {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .pagination-number:hover {
            background: rgba(255, 255, 255, 0.2);
            color: #ffffff;
            transform: translateY(-2px);
        }

        .pagination-number.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #ffffff;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .pagination-dots {
            color: rgba(255, 255, 255, 0.5);
            font-weight: bold;
            padding: 0 0.5rem;
        }

        @media (max-width: 768px) {
            .pagination {
                flex-direction: column;
                gap: 1rem;
            }

            .pagination-numbers {
                order: 2;
            }

            .pagination-btn {
                order: 1;
                width: 100%;
                justify-content: center;
            }
        }

        .action-btn-sm {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: rgba(255, 255, 255, 0.8);
            width: 35px;
            height: 35px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .action-btn-sm:hover {
            background: rgba(0, 212, 255, 0.2);
            border-color: #00d4ff;
            color: #00d4ff;
            transform: translateY(-2px);
        }

        .action-btn-sm.danger:hover {
            background: rgba(239, 68, 68, 0.2);
            border-color: #ef4444;
            color: #ef4444;
        }

        /* Empty State */
        .empty-state {
            grid-column: 1 / -1;
            text-align: center;
            padding: 4rem 2rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .empty-state p {
            font-size: 1rem;
            margin: 0 0 2rem;
        }

        .empty-action-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: linear-gradient(135deg, #00d4ff, #0099cc);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 212, 255, 0.2);
            box-shadow: 0 4px 15px rgba(0, 212, 255, 0.2);
        }

        .empty-action-btn:hover {
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 212, 255, 0.4);
            background: linear-gradient(135deg, #0099cc, #00d4ff);
        }

        .empty-action-btn i {
            font-size: 1rem;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .main-content {
                margin-left: 0;
            }

            .epic-sidebar {
                transform: translateX(-100%);
            }
        }

        @media (max-width: 768px) {
            .epic-header {
                padding: 1.5rem 1rem;
            }

            .accounts-section {
                padding: 1.5rem 1rem;
            }

            .stats-overview {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .search-section {
                flex-direction: column;
                align-items: stretch;
            }

            .search-bar {
                max-width: none;
            }

            .filter-buttons {
                justify-content: center;
                flex-wrap: wrap;
            }

            .accounts-grid {
                grid-template-columns: 1fr;
            }

            .header-content {
                flex-direction: column;
                align-items: flex-start;
            }

            .header-title h1 {
                font-size: 2rem;
            }

            .account-details {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
        }

        /* Developer Modal Styling */
        .developer-modal .modal-content {
            border: 2px solid #FFD700;
            box-shadow:
                0 25px 50px rgba(0, 0, 0, 0.5),
                0 0 30px rgba(255, 215, 0, 0.3),
                inset 0 1px 0 rgba(255, 215, 0, 0.2);
        }

        .developer-header {
            background: linear-gradient(135deg, #FFD700, #FFA500) !important;
            color: #000 !important;
            font-weight: bold;
        }

        .developer-header h3 {
            color: #000 !important;
            text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
        }

        .developer-banner {
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.1));
            border: 1px solid rgba(255, 215, 0, 0.3);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            animation: developerGlow 3s ease-in-out infinite;
        }

        @keyframes developerGlow {
            0%, 100% { box-shadow: 0 0 20px rgba(255, 215, 0, 0.3); }
            50% { box-shadow: 0 0 30px rgba(255, 215, 0, 0.5); }
        }

        .developer-icon {
            font-size: 3rem;
            color: #FFD700;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        .developer-info h4 {
            color: #FFD700;
            margin: 0 0 0.5rem 0;
            font-weight: bold;
            text-shadow: 0 0 5px rgba(255, 215, 0, 0.3);
        }

        .developer-info p {
            color: rgba(255, 255, 255, 0.8);
            margin: 0;
        }

        .developer-permissions {
            color: #00ff88 !important;
            font-weight: bold;
            padding: 1rem;
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 8px;
            margin-top: 1rem;
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-warning {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid rgba(255, 193, 7, 0.3);
            color: #ffc107;
        }

        .alert-danger {
            background: rgba(220, 53, 69, 0.1);
            border: 1px solid rgba(220, 53, 69, 0.3);
            color: #dc3545;
        }

        .alert ul {
            margin: 0.5rem 0 0 1rem;
            padding: 0;
        }

        .alert li {
            margin-bottom: 0.25rem;
        }
    </style>
</head>
<body>
    <div class="dashboard-bg"></div>

    <!-- Epic Sidebar -->
    <div class="epic-sidebar">
        <div class="sidebar-brand">
            <a href="/" class="brand-logo">
                <div class="brand-icon">
                    <i class="bi bi-controller"></i>
                </div>
                <div class="brand-text">
                    <h4>Gaming Store</h4>
                    <span>Admin Panel</span>
                </div>
            </a>
        </div>

        <nav class="sidebar-nav">
            <div class="nav-section">
                <div class="nav-section-title">Main</div>
                <div class="nav-item">
                    <a href="/admin/dashboard" class="nav-link">
                        <i class="bi bi-speedometer2"></i>
                        <span>Dashboard</span>
                    </a>
                </div>
            </div>

            <div class="nav-section">
                <div class="nav-section-title">Management</div>
                <div class="nav-item">
                    <a href="/admin/users" class="nav-link">
                        <i class="bi bi-people"></i>
                        <span>Users</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/admin/accounts" class="nav-link active">
                        <i class="bi bi-controller"></i>
                        <span>Gaming Accounts</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/admin/transactions" class="nav-link">
                        <i class="bi bi-credit-card"></i>
                        <span>Transactions</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/admin/purchases" class="nav-link">
                        <i class="bi bi-bag-check"></i>
                        <span>Purchases</span>
                    </a>
                </div>
            </div>

            <div class="nav-section">
                <div class="nav-section-title">System</div>
                <div class="nav-item">
                    <a href="/admin/admin-users" class="nav-link">
                        <i class="bi bi-shield-lock"></i>
                        <span>Admin Users</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/admin/broadcast" class="nav-link">
                        <i class="bi bi-megaphone"></i>
                        <span>Broadcast</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/admin/settings" class="nav-link">
                        <i class="bi bi-gear"></i>
                        <span>Settings</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/health" class="nav-link">
                        <i class="bi bi-heart-pulse"></i>
                        <span>System Status</span>
                    </a>
                </div>
                <div class="nav-item">
                    <form action="/admin/logout" method="POST" style="margin: 0;">
                        <button type="submit" class="nav-link" style="background: none; border: none; width: 100%; text-align: left;">
                            <i class="bi bi-box-arrow-right"></i>
                            <span>Logout</span>
                        </button>
                    </form>
                </div>
            </div>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Epic Header -->
        <div class="epic-header">
            <div class="header-content">
                <div class="header-title">
                    <i class="bi bi-controller"></i>
                    <h1>Gaming Accounts</h1>
                </div>
                <div class="header-actions">
                    <a href="#" class="action-btn" onclick="refreshAccounts()">
                        <i class="bi bi-arrow-clockwise"></i>
                        <span>Refresh</span>
                    </a>
                    <a href="/admin/accounts/new" class="action-btn primary">
                        <i class="bi bi-plus-circle"></i>
                        <span>Add New Account</span>
                    </a>
                </div>
            </div>
        </div>

        <!-- Accounts Content -->
        <div class="accounts-section">
            <!-- Stats Overview -->
            <div class="stats-overview">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-controller"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= accountStats ? accountStats.total : 0 %></h3>
                        <p>Total Accounts</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= accountStats ? accountStats.available : 0 %></h3>
                        <p>Available</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-bag-check"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= accountStats ? accountStats.sold : 0 %></h3>
                        <p>Sold</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-currency-dollar"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= accountStats ? formatCurrency(accountStats.totalValue) : '$0.00' %></h3>
                        <p>Total Value</p>
                    </div>
                </div>
            </div>

            <!-- Search and Filters -->
            <div class="search-section">
                <div class="search-bar">
                    <i class="bi bi-search"></i>
                    <input type="text" id="accountSearch" placeholder="Search accounts by title, game, or description...">
                </div>
                <div class="filter-buttons">
                    <button class="filter-btn active" data-filter="all">All Accounts</button>
                    <button class="filter-btn" data-filter="available">Available</button>
                    <button class="filter-btn" data-filter="sold">Sold</button>
                    <button class="filter-btn" data-filter="featured">Featured</button>
                </div>
            </div>

            <!-- Accounts Grid -->
            <div class="accounts-grid" id="accountsGrid">
                <% if (accounts && accounts.length > 0) { %>
                    <% accounts.forEach(account => { %>
                    <div class="account-card" data-account-id="<%= account.id %>" data-status="<%= account.status %>">
                        <div class="account-header">
                            <div class="account-game">
                                <i class="bi bi-controller"></i>
                                <span><%= account.game || 'Unknown Game' %></span>
                            </div>
                            <div class="account-status <%= account.status %>">
                                <i class="bi bi-circle-fill"></i>
                                <%= account.status %>
                            </div>
                        </div>

                        <div class="account-info">
                            <h4><%= account.title %></h4>
                            <p class="account-description"><%= account.description || 'No description available' %></p>
                        </div>

                        <div class="account-details">
                            <div class="detail-item">
                                <span class="label">Price</span>
                                <span class="value price"><%= formatCurrency(account.price) %></span>
                            </div>
                            <div class="detail-item">
                                <span class="label">Level</span>
                                <span class="value"><%= account.level || 'N/A' %></span>
                            </div>
                            <div class="detail-item">
                                <span class="label">Created</span>
                                <span class="value"><%= formatDate(account.created_at) %></span>
                            </div>
                        </div>

                        <!-- Account Code Section -->
                        <% if (account.account_code) { %>
                        <div class="credentials-section">
                            <div class="credentials-header">
                                <i class="bi bi-tag"></i>
                                <span>Account Code</span>
                            </div>
                            <div class="credentials-content">
                                <div class="credential-item">
                                    <span class="credential-value code-value" onclick="copyToClipboard('<%= account.account_code %>')">
                                        <%= account.account_code %>
                                        <i class="bi bi-copy copy-icon"></i>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <% } %>

                        <% if (account.purchases && account.purchases.length > 0) { %>
                        <div class="purchase-info">
                            <div class="purchase-header">
                                <i class="bi bi-cart-check"></i>
                                <span>Purchased by <%= account.purchases.length %> user<%= account.purchases.length > 1 ? 's' : '' %></span>
                            </div>
                            <% account.purchases.forEach((purchase, index) => { %>
                                <% if (index < 3) { %> <!-- Show max 3 purchases -->
                                <div class="purchase-item">
                                    <div class="purchase-user">
                                        <% if (purchase.first_name || purchase.last_name) { %>
                                            <div class="user-name"><%= (purchase.first_name || '') + ' ' + (purchase.last_name || '') %></div>
                                            <% if (purchase.username) { %>
                                                <div class="user-username">@<%= purchase.username %></div>
                                            <% } %>
                                        <% } else if (purchase.username) { %>
                                            <div class="user-name">@<%= purchase.username %></div>
                                        <% } else { %>
                                            <div class="user-name">ID: <%= purchase.telegram_id || purchase.user_id %></div>
                                        <% } %>
                                    </div>
                                    <div class="purchase-date">
                                        <%= formatDate(purchase.purchase_date) %>
                                    </div>
                                </div>
                                <% } %>
                            <% }); %>
                            <% if (account.purchases.length > 3) { %>
                                <div class="purchase-more">
                                    +<%= account.purchases.length - 3 %> more purchase<%= account.purchases.length - 3 > 1 ? 's' : '' %>
                                </div>
                            <% } %>
                        </div>
                        <% } %>

                        <div class="account-actions">
                            <button class="action-btn-sm" onclick="showcaseAccount(<%= account.id %>)" title="View Showcase">
                                <i class="bi bi-display"></i>
                            </button>
                            <button class="action-btn-sm" onclick="viewAccount(<%= account.id %>)" title="View Details">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="action-btn-sm" onclick="editAccount(<%= account.id %>)" title="Edit Account">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="action-btn-sm danger" onclick="deleteAccount(<%= account.id %>)" title="Delete Account">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <i class="bi bi-controller"></i>
                        <h3>No Gaming Accounts Found</h3>
                        <p>No gaming accounts have been added yet. Click "Add New Account" to create your first gaming account listing.</p>
                        <a href="/admin/accounts/new" class="empty-action-btn">
                            <i class="bi bi-plus-circle"></i>
                            <span>Add Your First Account</span>
                        </a>
                    </div>
                <% } %>
            </div>

            <!-- Pagination -->
            <% if (totalPages > 1) { %>
            <div class="pagination-container">
                <div class="pagination-info">
                    Showing <%= ((currentPage - 1) * limit) + 1 %>-<%= Math.min(currentPage * limit, accountStats.total) %> of <%= accountStats.total %> accounts
                </div>
                <div class="pagination">
                    <% if (hasPrevPage) { %>
                        <a href="/admin/accounts?page=<%= currentPage - 1 %>" class="pagination-btn">
                            <i class="bi bi-chevron-left"></i>
                            Previous
                        </a>
                    <% } %>

                    <div class="pagination-numbers">
                        <%
                        const startPage = Math.max(1, currentPage - 2);
                        const endPage = Math.min(totalPages, currentPage + 2);
                        %>

                        <% if (startPage > 1) { %>
                            <a href="/admin/accounts?page=1" class="pagination-number">1</a>
                            <% if (startPage > 2) { %>
                                <span class="pagination-dots">...</span>
                            <% } %>
                        <% } %>

                        <% for (let i = startPage; i <= endPage; i++) { %>
                            <% if (i === currentPage) { %>
                                <span class="pagination-number active"><%= i %></span>
                            <% } else { %>
                                <a href="/admin/accounts?page=<%= i %>" class="pagination-number"><%= i %></a>
                            <% } %>
                        <% } %>

                        <% if (endPage < totalPages) { %>
                            <% if (endPage < totalPages - 1) { %>
                                <span class="pagination-dots">...</span>
                            <% } %>
                            <a href="/admin/accounts?page=<%= totalPages %>" class="pagination-number"><%= totalPages %></a>
                        <% } %>
                    </div>

                    <% if (hasNextPage) { %>
                        <a href="/admin/accounts?page=<%= currentPage + 1 %>" class="pagination-btn">
                            Next
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    <% } %>
                </div>
            </div>
            <% } %>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Epic Accounts JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            // Animate account cards on load
            const accountCards = document.querySelectorAll('.account-card');
            accountCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(30px)';

                setTimeout(() => {
                    card.style.transition = 'all 0.6s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 50);
            });

            // Animate stat cards
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateX(-30px)';

                setTimeout(() => {
                    card.style.transition = 'all 0.6s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateX(0)';
                }, index * 100);
            });

            // Search functionality
            const searchInput = document.getElementById('accountSearch');
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                filterAccounts(searchTerm);
            });

            // Filter buttons
            const filterButtons = document.querySelectorAll('.filter-btn');
            filterButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    filterButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');

                    const filter = this.dataset.filter;
                    filterAccountsByStatus(filter);
                });
            });
        });

        function filterAccounts(searchTerm) {
            const accountCards = document.querySelectorAll('.account-card');
            accountCards.forEach(card => {
                const text = card.textContent.toLowerCase();
                if (text.includes(searchTerm)) {
                    card.style.display = 'block';
                    card.style.animation = 'fadeIn 0.3s ease';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        function filterAccountsByStatus(filter) {
            const accountCards = document.querySelectorAll('.account-card');
            accountCards.forEach(card => {
                const status = card.dataset.status;

                if (filter === 'all') {
                    card.style.display = 'block';
                } else if (filter === 'available' && status === 'available') {
                    card.style.display = 'block';
                } else if (filter === 'sold' && status === 'sold') {
                    card.style.display = 'block';
                } else if (filter === 'featured') {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }

                if (card.style.display === 'block') {
                    card.style.animation = 'fadeIn 0.3s ease';
                }
            });
        }

        function showcaseAccount(accountId) {
            window.location.href = `/admin/accounts/${accountId}/showcase`;
        }

        function viewAccount(accountId) {
            window.location.href = `/admin/accounts/${accountId}`;
        }

        function editAccount(accountId) {
            window.location.href = `/admin/accounts/${accountId}/edit`;
        }

        // Developer modal functions removed - now using direct force delete

        function forceDeleteAccount(accountId) {
            console.log('🚨 Force deleting account:', accountId);

            const accountCard = document.querySelector(`[data-account-id="${accountId}"]`);

            // Add loading state
            if (accountCard) {
                accountCard.style.opacity = '0.5';
                accountCard.style.pointerEvents = 'none';

                // Add loading spinner to delete button
                const deleteBtn = accountCard.querySelector(`button[onclick="deleteAccount(${accountId})"]`);
                if (deleteBtn) {
                    deleteBtn.innerHTML = '<i class="bi bi-hourglass-split"></i>';
                    deleteBtn.disabled = true;
                }
            }

            showNotification('🚨 Developer force deleting account and purchases...', 'warning');

                // Make API call with force flag
                fetch(`/admin/accounts/${accountId}/delete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ force: true })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('🚨 Account and purchases force deleted successfully', 'success');

                        // Animate card removal
                        if (accountCard) {
                            accountCard.style.transition = 'all 0.5s ease';
                            accountCard.style.transform = 'translateX(-100%)';
                            accountCard.style.opacity = '0';

                            setTimeout(() => {
                                accountCard.remove();
                                updateAccountStats();
                                checkEmptyPage();
                            }, 500);
                        }
                    } else {
                        showNotification(data.error || 'Failed to force delete account', 'error');

                        // Restore card state
                        if (accountCard) {
                            accountCard.style.opacity = '1';
                            accountCard.style.pointerEvents = 'auto';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error force deleting account:', error);
                    showNotification('Error force deleting account', 'error');

                    // Restore card state
                    if (accountCard) {
                        accountCard.style.opacity = '1';
                        accountCard.style.pointerEvents = 'auto';
                    }
                });
        }

        function deleteAccount(accountId) {
            if (confirm('Are you sure you want to delete this gaming account? This action cannot be undone.')) {
                // Find the account card element
                const accountCard = document.querySelector(`[data-account-id="${accountId}"]`);

                // Add loading state
                if (accountCard) {
                    accountCard.style.opacity = '0.5';
                    accountCard.style.pointerEvents = 'none';

                    // Add loading spinner to delete button
                    const deleteBtn = accountCard.querySelector(`button[onclick="deleteAccount(${accountId})"]`);
                    if (deleteBtn) {
                        deleteBtn.innerHTML = '<i class="bi bi-hourglass-split"></i>';
                        deleteBtn.disabled = true;
                    }
                }

                showNotification('Deleting account...', 'info');

                // Make API call to delete account
                fetch(`/admin/accounts/${accountId}/delete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    console.log('🔍 Delete response:', data);

                    if (data.success) {
                        const message = data.isDeveloper ?
                            'Account force deleted successfully (including associated purchases)' :
                            'Account deleted successfully';
                        showNotification(message, 'success');

                        // Animate card removal
                        if (accountCard) {
                            accountCard.style.transition = 'all 0.5s ease';
                            accountCard.style.transform = 'translateX(-100%)';
                            accountCard.style.opacity = '0';

                            // Remove the card after animation
                            setTimeout(() => {
                                accountCard.remove();

                                // Update account count in stats
                                updateAccountStats();

                                // Check if page is now empty and redirect if needed
                                checkEmptyPage();
                            }, 500);
                        }
                    } else {
                        console.log('🔍 Delete failed, checking developer options...');
                        console.log('🔍 isDeveloper:', data.isDeveloper);
                        console.log('🔍 canForceDelete:', data.canForceDelete);

                        // Check if this is a developer who can force delete
                        if (data.isDeveloper && data.canForceDelete) {
                            console.log('🚨 Developer detected - automatically force deleting...');
                            // Automatically force delete for developer without showing modal
                            forceDeleteAccount(data.accountId);
                        } else {
                            console.log('❌ Not developer or cannot force delete');
                            showNotification(data.error || 'Failed to delete account', 'error');
                        }

                        // Restore card state on error
                        if (accountCard) {
                            accountCard.style.opacity = '1';
                            accountCard.style.pointerEvents = 'auto';

                            const deleteBtn = accountCard.querySelector(`button[onclick="deleteAccount(${accountId})"]`);
                            if (deleteBtn) {
                                deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
                                deleteBtn.disabled = false;
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error deleting account:', error);
                    showNotification('Failed to delete account', 'error');

                    // Restore card state on error
                    if (accountCard) {
                        accountCard.style.opacity = '1';
                        accountCard.style.pointerEvents = 'auto';

                        const deleteBtn = accountCard.querySelector(`button[onclick="deleteAccount(${accountId})"]`);
                        if (deleteBtn) {
                            deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
                            deleteBtn.disabled = false;
                        }
                    }
                });
            }
        }

        function updateAccountStats() {
            // Update the account count in the stats section
            fetch('/admin/api/stats')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.accountStats) {
                        const totalElement = document.querySelector('.stat-card .stat-number');
                        if (totalElement) {
                            totalElement.textContent = data.accountStats.total;
                        }

                        // Update pagination info if it exists
                        const paginationInfo = document.querySelector('.pagination-info');
                        if (paginationInfo) {
                            const currentCards = document.querySelectorAll('.account-card').length;
                            const currentPage = parseInt(new URLSearchParams(window.location.search).get('page')) || 1;
                            const limit = 10;
                            const startItem = ((currentPage - 1) * limit) + 1;
                            const endItem = Math.min(startItem + currentCards - 1, data.accountStats.total);

                            paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${data.accountStats.total} accounts`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating stats:', error);
                });
        }

        function checkEmptyPage() {
            // Check if current page is now empty
            const remainingCards = document.querySelectorAll('.account-card').length;

            if (remainingCards === 0) {
                const currentPage = parseInt(new URLSearchParams(window.location.search).get('page')) || 1;

                // If we're on page 2 or higher and it's empty, go to previous page
                if (currentPage > 1) {
                    setTimeout(() => {
                        window.location.href = `/admin/accounts?page=${currentPage - 1}`;
                    }, 1000);
                } else {
                    // If we're on page 1 and it's empty, show empty state
                    const accountsGrid = document.querySelector('.accounts-grid');
                    if (accountsGrid) {
                        accountsGrid.innerHTML = `
                            <div class="empty-state">
                                <i class="bi bi-controller"></i>
                                <h3>No Gaming Accounts Found</h3>
                                <p>No gaming accounts have been added yet. Click "Add New Account" to create your first gaming account listing.</p>
                                <a href="/admin/accounts/new" class="empty-action-btn">
                                    <i class="bi bi-plus-circle"></i>
                                    <span>Add Your First Account</span>
                                </a>
                            </div>
                        `;

                        // Hide pagination
                        const paginationContainer = document.querySelector('.pagination-container');
                        if (paginationContainer) {
                            paginationContainer.style.display = 'none';
                        }
                    }
                }
            }
        }

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                showNotification('Copied to clipboard!', 'success');
            }, function(err) {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showNotification('Copied to clipboard!', 'success');
            });
        }

        function refreshAccounts() {
            const refreshBtn = document.querySelector('.action-btn');
            const originalText = refreshBtn.innerHTML;

            refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise spin"></i><span>Refreshing...</span>';
            refreshBtn.style.pointerEvents = 'none';

            showNotification('Refreshing accounts list...', 'info');

            setTimeout(() => {
                refreshBtn.innerHTML = originalText;
                refreshBtn.style.pointerEvents = 'auto';
                showNotification('Accounts list refreshed!', 'success');
            }, 1500);
        }

        // Show notification function
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                <span>${message}</span>
            `;

            notification.style.cssText = `
                position: fixed;
                top: 2rem;
                right: 2rem;
                background: ${type === 'success' ? 'rgba(34, 197, 94, 0.9)' : type === 'error' ? 'rgba(239, 68, 68, 0.9)' : 'rgba(59, 130, 246, 0.9)'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 10px;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                z-index: 10000;
                backdrop-filter: blur(10px);
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Add animation styles
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }

            .spin {
                animation: spin 1s linear infinite;
            }

            @keyframes spin {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
